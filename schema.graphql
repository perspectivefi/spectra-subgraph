####################
# Enums
####################

enum AssetType {
    UNDERLYING
    IBT
    PT
    YT
    FYT
    LP
    UNKNOWN
}

enum TransactionType {
    DEPOSIT
    WITHDRAW
    CLAIM
    SWAP
}

enum FutureStatus {
    ACTIVE
    PAUSED
    EXPIRED
}

enum AMM {
    CURVE
    UNISWAP_V3
    UNKNOWN
}

enum PriceSource {
    CHAINLINK
    REDSTONE
}

enum FutureState {
    ACTIVE
    PAUSED
    EXPIRED
}

####################
# High level detail entities
####################

type Platform @entity {
# IBT platform (as entity because of permissionless pool creation process - possibility to add new platforms without subgraph update)
    id: ID!
    createdAtTimestamp: BigInt!
    name: String!
    infoUrl: String!
}

type LPTokenDetails @entity {
# if an Asset is LPToken we need more details for this entity
    id: ID!
    address: String!
    createdAtTimestamp: BigInt!
    supply: BigDecimal!
    numberOfTokens: Int!
    tokens: [Asset!]!
}

type FYTTokenDetails @entity {
# if an AssetAmount describes amount of FYTToken we need more details for this entity
    id: ID!
    createdAtTimestamp: BigInt!
    expirationAtTimestamp: BigInt!
    generatedYield: BigDecimal!
    generatedYieldValue: BigDecimal
}

####################
# Registry
####################

type FutureVaultFactory @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    name: String!
    old: FutureVaultFactory
    address: Bytes!
}

####################
# Assets and prices
####################

type Asset @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!
    name: String!
    symbol: String!
    decimals: Int!
    price: AssetPrice
    type: AssetType!

    chainlinkPriceFeed: ChainlinkAggregatorProxy
    underlying: Asset
}

type AssetPrice @entity {
# Asset dollar price which belongs to already created Asset entity
    id: ID!
    createdAtTimestamp: BigInt!
    value: BigDecimal!
    source: PriceSource
    asset: Asset!
}

type AssetAmount @entity {
# defines amount and value of all the instances of Asset as well as entity these values belongs to
    id: ID!
    createdAtTimestamp: BigInt!
    amount: BigInt!
#    value: BigDecimal!
    asset: Asset!
#    fytTokenDetails: FYTTokenDetails
}

type UserAsset @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    balance: BigInt!
    #    value: BigDecimal!
    asset: Asset!
    user: User!
    #    fytTokenDetails: FYTTokenDetails
}

type ChainlinkAggregatorProxy @entity {
    id: ID!
    aggregator: String!
    asset: Asset!
}

####################
# Futures
####################

type Future @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!
    expirationAtTimestamp: BigInt!
    symbol: String!
    name: String!

    daoFeeRate: BigInt!
    totalFees: BigDecimal!
    feeClaims: [FeeClaim!]! @derivedFrom(field: "future")

    totalAssets: BigInt!

    state: FutureState!
    underlyingAsset: Asset!
    ibtAsset: Asset!

    transactions: [Transaction!]! @derivedFrom(field: "futureInTransaction")
#
#    ibtToUnderlyingRatio: Value

#    platform: Platform!
#    manager: User!
#    infoUrl: String
#    pools: [Pool!]
}

type FeeClaim @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    amount: BigInt!

    feeCollector: User!
    future: Future!
}

####################
# User
####################

type User @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!

    collectedFees: [FeeClaim!]! @derivedFrom(field: "feeCollector")
    transactions: [Transaction!]! @derivedFrom(field: "userInTransaction")
    portfolio: [UserAsset!]! @derivedFrom(field: "user")
}

type Transaction @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!
    block: BigInt!

    gas: BigInt!
    gasPrice: BigInt!

#    fee: BigDecimal!
    type: TransactionType!

    from: Bytes!
    to: Bytes!

    futureInTransaction: Future
    userInTransaction: User

    amountsIn: [AssetAmount!]!
    amountsOut: [AssetAmount!]!
}