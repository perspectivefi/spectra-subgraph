####################
# Init
####################

type Network @entity {
    id: ID!
    name: String!
    chainId: Int!
}

####################
# Enums
####################

enum AssetType {
    UNDERLYING
    IBT
    PT
    YT
    FYT
    LP
    LP_VAULT_SHARES
    UNKNOWN
}

enum TransactionType {
    FUTURE_VAULT_DEPOSIT
    FUTURE_VAULT_WITHDRAW
    AMM_ADD_LIQUIDITY
    AMM_REMOVE_LIQUIDITY
    # if only one coin has been withdrawn
    AMM_REMOVE_LIQUIDITY_ONE
    AMM_EXCHANGE
    LP_VAULT_UNDERLYING_DEPOSIT
    LP_VAULT_IBT_DEPOSIT
    LP_VAULT_WITHDRAW
    LP_VAULT_REDEEM
}

enum AMM {
    CURVE
    UNISWAP_V3
    UNKNOWN
}

enum PriceSource {
    CHAINLINK
    REDSTONE
}

enum FutureState {
    ACTIVE
    PAUSED
    EXPIRED
}

####################
# High level detail entities
####################

"Platform entity to define IBT/FutureVault platform"
# possibility to add new platforms without subgraph update)
type Platform @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    name: String!
    infoUrl: String!
}

"FYTTokenDetails entity to define token details in case it is a FYT token"
type FYTTokenDetails @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    expirationAtTimestamp: BigInt!

    generatedYield: BigDecimal
    generatedYieldValue: BigDecimal
}

"LPTokenDetails entity to define token details in case it is a LP token"
type LPTokenDetails @entity {
    id: ID!
    createdAtTimestamp: BigInt!

    totalSupply: BigInt!

    tokens: [Asset!]!
}

"ValueInTime entity to connect a value with time for history purpose"
type ValueInTime @entity {
    id: ID!
    timestamp: BigInt!
    value: BigInt!
}

####################
# Factory
####################

type FutureVaultFactory @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    old: FutureVaultFactory
    address: Bytes!

    poolFactory: PoolFactory
    deployedFutures: [Future!]! @derivedFrom(field: "futureVaultFactory")
    deployedPools: [Pool!]! @derivedFrom(field: "futureVaultFactory")
}

####################
# Assets and prices
####################

"Asset entity to index all kind of details of an asset stored in the subgraph"
type Asset @entity {
    id: ID!
    chainId: Int!
    address: Bytes!
    createdAtTimestamp: BigInt!
    name: String!
    symbol: String!
    decimals: Int!
    price: AssetPrice
    type: AssetType!

    "on of the price feeds"
    chainlinkPriceFeed: ChainlinkAggregatorProxy

    "for PT/YT/LP tokens"
    futureVault: Future

    "in the case the asset is an IBT we create relation between this IBT and its underlying asset"
    underlying: Asset
    fytTokenDetails: FYTTokenDetails
    lpTokenDetails: LPTokenDetails
}

"AssetPrice entity to assign a price of a token to an Asset entity and its price source"
type AssetPrice @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    value: BigDecimal!
    source: PriceSource
    asset: Asset!
}

"AssetAmount entity to assign an amount of token (in a transaction for instance) to its dollar value and exact asset"
type AssetAmount @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    amount: BigInt!
#    value: BigDecimal!
    asset: Asset!
#    fytTokenDetails: FYTTokenDetails
}

"AccountAsset entity to assign and update account's assets balances"
type AccountAsset @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    balance: BigInt!
    #    value: BigDecimal!
    "relation to the asset details"
    asset: Asset!
    "relation to the account details"
    account: Account!
    "if lp position"
    pool: Pool
    "if lp vault position"
    lpVault: LPVault
    #    fytTokenDetails: FYTTokenDetails
}

"ChainlinkAggregatorProxy entity to save information about Chainlink aggregator, mapper should use to fetch the price of an asset"
type ChainlinkAggregatorProxy @entity {
    id: ID!
    "aggregator address"
    aggregator: String!
    asset: Asset!
}

####################
# Futures
####################

"Future entity to index all the future's stats as well as its transactions, managers and other relations"
type Future @entity {
    id: ID!
    chainId: Int!
    address: Bytes!
    createdAtTimestamp: BigInt!
    expirationAtTimestamp: BigInt!
    symbol: String!
    name: String!

    futureVaultFactory: FutureVaultFactory

    "how big is the fee setup for that future"
    daoFeeRate: BigInt!
    unclaimedFees: BigInt!
    "sum of the collected fees"
    totalCollectedFees: BigInt!
    "list of all the claims with the details"
    feeClaims: [FeeClaim!]! @derivedFrom(field: "future")

    "sum of the assets (IBTs) allocated into future"
    totalAssets: BigInt!

    state: FutureState!
    underlyingAsset: Asset!
    ibtAsset: Asset!

    pools: [Pool!]! @derivedFrom(field: "futureVault")

    transactions: [Transaction!]! @derivedFrom(field: "futureInTransaction")
    futureDailyStats: [FutureDailyStats!]! @derivedFrom(field: "future")

#    ibtToUnderlyingRatio: Value

#    platform: Platform!
#    infoUrl: String
}

"FeeClaim entity to list claims triggered on an future by a account"
type FeeClaim @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    amount: BigInt!

    "claimant of the fee"
    feeCollector: Account!
    "future that collector claimed the fee from"
    future: Future
    "pool that collector claimed the fees from"
    pool: Pool
}

"The daily data of the future vault"
type FutureDailyStats @entity {
  id: ID! # future address and timestamp rounded to current day by dividing by 86400
  future: Future! # future address
  date: Int! # future address and timestamp rounded to current day by dividing by 86400
  dailyDeposits: BigInt! # total deposits in the day (the unit is a count of transactions)
  dailyWithdrawals: BigInt! # total withdrawals in the day (the unit is a count of transactions)
  dailySwaps: BigInt! # total swaps in the day in the AMM (the unit is a count of transactions)
  dailyAddLiquidity: BigInt! # total add liquidity in the day in the AMM (the unit is a count of transactions)
  dailyRemoveLiquidity: BigInt! # total remove liquidity in the day in the AMM (the unit is a count of transactions)
  dailyUpdates: BigInt! # total updates of the FutureDailyStats. This is used to compute the IBT rate as an incremental average (the unit is a count of transactions)
  ibtRate: BigInt! # The average rate of the IBT token for the day
  realizedAPR7D: BigDecimal! # The realized APR (in % i.e: realizedAPR7D = 1 <==> APR = 100%) of the IBT token over the last 7 days
  realizedAPR30D: BigDecimal! # The realized APR of the IBT token over the last 30 days
  realizedAPR90D: BigDecimal! # The realized APR of the IBT token over the last 90 days
}

####################
# Account
####################

"Account entity to index all kind of data related to a user of the protocol"
type Account @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!

    collectedFees: [FeeClaim!]! @derivedFrom(field: "feeCollector")
    transactions: [Transaction!]! @derivedFrom(field: "userInTransaction")
    portfolio: [AccountAsset!]! @derivedFrom(field: "account")

    transfersOut: [Transfer!]! @derivedFrom(field: "from")
    transfersIn: [Transfer!]! @derivedFrom(field: "to")
}

####################
# Transaction
####################

"Transaction entity for all kind of the transactions"
type Transaction @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!
    block: BigInt!

    gas: BigInt!
    gasPrice: BigInt!

    fee: BigInt
    adminFee: BigInt

    type: TransactionType!

    "if there is any future on any side of the transaction to be able to list this future's transactions"
    futureInTransaction: Future
    "if there is any user on any side of the transaction to be able to list this user's transactions"
    userInTransaction: Account
    "if there is any pool on any side of the transaction to be able to list this pool's transactions"
    poolInTransaction: Pool
    "if there is any LPVault on any side of the transaction to be able to list this pool's transactions"
    lpVaultInTransaction: LPVault

    "in case if more than one token was sent"
    amountsIn: [AssetAmount!]!
    "in case if more than one token was received"
    amountsOut: [AssetAmount!]!
}

####################
# AMM
####################

type PoolFactory @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!

    "it will be Curve by default but we will be able to index others as well"
    ammProvider: AMM!
    feeReceiver: Account!
    admin: Bytes!

    futureVaultFactory: FutureVaultFactory

    pools: [Pool!]! @derivedFrom(field: "factory")
}

type Pool @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!

    "pool fees details"
    feeRate: BigInt!
    totalFees: BigInt!
    adminFeeRate: BigInt!
    totalAdminFees: BigInt!
    totalClaimedAdminFees: BigInt!
    feeClaims: [FeeClaim!]! @derivedFrom(field: "pool")
    futureAdminFeeRate: BigInt!
    futureAdminFeeDeadline: BigInt!

    futureVaultFactory: FutureVaultFactory
    futureVault: Future
    "to be able to follow all the pools created by a factory"
    factory: PoolFactory

    liquidityToken: Asset!
    assets: [AssetAmount!]

    transactionCount: Int!
    transactions: [Transaction!] @derivedFrom(field: "poolInTransaction")

    totalLPSupply: BigInt!
    liquidityPositions: [AccountAsset!]! @derivedFrom(field: "pool")


#    Asset pricing is not competed at this point
#    valueHistory: [Value!]
}

type Transfer @entity {
    id: ID!
    address: Bytes!
    createdAtTimestamp: BigInt!
    block: BigInt!

    gasLimit: BigInt!
    gasPrice: BigInt!

    from: Account!
    to: Account!

    amountOut: AssetAmount!
}

####################
# LPVaults
####################

type LPVaultFactory @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    address: Bytes!

    oldFactory: LPVaultFactory

    deployedLPVaults: [LPVault!]! @derivedFrom(field: "lpVaultFactory")
}

type LPVaultInterest @entity {
    id: ID!
    chainId: Int!
    createdAtTimestamp: BigInt!

    lpVault: LPVault!
    interest: BigInt!
}

type LPVault @entity {
    id: ID!
    chainId: Int!
    address: Bytes!
    createdAtTimestamp: BigInt!
    expirationAtTimestamp: BigInt!

    lpVaultFactory: LPVaultFactory!
    future: Future!
    pool: Pool

    state: FutureState!
    fee: BigInt

    poolIndex: BigInt
    underlying: Asset!
    ibt: Asset!
    totalAssets: BigInt!

    name: String!
    symbol: String!

    positions: [AccountAsset!]! @derivedFrom(field: "lpVault")
    transactions: [Transaction!]! @derivedFrom(field: "lpVaultInTransaction")

    # interestInTime: [LPVaultInterest!]! @derivedFrom(field: "lpVault")
}
